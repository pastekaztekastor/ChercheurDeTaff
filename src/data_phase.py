# Generated by https://quicktype.io

from typing import Optional, List
import json

class PremierContact:
    sujet: str
    content: str

    def __init__(self, sujet: str, content: str) -> None:
        self.sujet = sujet
        self.content = content


class RelanceReguliere:
    relance_type: Optional[PremierContact]
    sujet: Optional[str]
    content: Optional[str]

    def __init__(self, relance_type: Optional[PremierContact], sujet: Optional[str], content: Optional[str]) -> None:
        self.relance_type = relance_type
        self.sujet = sujet
        self.content = content


class MailType:
    premier_contact: Optional[PremierContact]
    relance_reguliere: RelanceReguliere

    def __init__(self, premier_contact: Optional[PremierContact], relance_reguliere: RelanceReguliere) -> None:
        self.premier_contact = premier_contact
        self.relance_reguliere = relance_reguliere


class PhaseElement:
    nom: str
    relance_durée: List[int]
    mail_type: MailType
    objectif: str

    def __init__(self, nom: str, relance_durée: List[int], mail_type: MailType, objectif: str) -> None:
        self.nom = nom
        self.relance_durée = relance_durée
        self.mail_type = mail_type
        self.objectif = objectif
        
def loadJsonPhase(json_file):
    with open(json_file, 'r') as file:
        data = json.load(file)

    elements = []
    for item in data:
        nom = item["nom"]
        relance_duree = item["RelanceDurée"]

        premier_contact_data = item["mailType"]["premierContact"]
        premier_contact = PremierContact(premier_contact_data["sujet"], premier_contact_data["content"])

        relance_reguliere_data = item["mailType"]["relanceReguliere"]
        relance_reguliere = RelanceReguliere(None, relance_reguliere_data["sujet"], relance_reguliere_data["content"])

        mail_type = MailType(premier_contact, relance_reguliere)
        objectif = item["objectif"]

        phase_element = PhaseElement(nom, relance_duree, mail_type, objectif)
        elements.append(phase_element)

    return elements

def updateJsonPhase(elements, json_file):
    data = []
    for element in elements:
        premier_contact = {
            "sujet": element.mail_type.premier_contact.sujet,
            "content": element.mail_type.premier_contact.content
        } if element.mail_type.premier_contact else None

        relance_reguliere = {
            "sujet": element.mail_type.relance_reguliere.sujet,
            "content": element.mail_type.relance_reguliere.content
        }

        mail_type = {
            "premierContact": premier_contact,
            "relanceReguliere": relance_reguliere
        }

        data.append({
            "nom": element.nom,
            "RelanceDurée": element.relance_duree,
            "mailType": mail_type,
            "objectif": element.objectif
        })

    with open(json_file, 'w') as file:
        json.dump(data, file, indent=4)

def time_remaining_before_email(phase_nom: str, mails_envoyes: int, phase_liste) -> Optional[int]:
    # Trouver l'objet PhaseElement correspondant au nom de phase donné
    phase_element = next((element for element in phase_liste if element.nom == phase_nom), None)
    
    if phase_element:
        # Récupérer la liste des délais de relance pour cette phase
        relance_duree = phase_element.relance_durée
        
        # Vérifier si le nombre de mails envoyés est inférieur à la longueur de la liste relance_duree
        if mails_envoyes < len(relance_duree):
            # Calculer le nombre de jours restants avant le prochain mail
            jours_restants = relance_duree[mails_envoyes]
            return jours_restants
        else:
            return relance_duree[len(relance_duree)-1]  # Aucune relance planifiée prend la dernière date de relance.
    else:
        return 0  # Aucune phase trouvée avec le nom donné
