# Generated by https://quicktype.io

from ast import Tuple
from typing import List
import json
from datetime import datetime

class HistoriqueDeMail:
    mail_destinaire: str
    mail_expediteur: str
    sujet: str
    content: str
    phase: str
    date: str

    def __init__(self, mail_destinaire: str, mail_expediteur: str, sujet: str, content: str, phase: str, date: str) -> None:
        self.mail_destinaire = mail_destinaire
        self.mail_expediteur = mail_expediteur
        self.sujet = sujet
        self.content = content
        self.phase = phase
        self.date = date


class EntrepriseElement:
    nom: str
    adresse: str
    zip_code: int
    ville: str
    mail_de_contact: List[str]
    a_propos: str
    historique_de_mail: List[HistoriqueDeMail]
    phase: str
    active: bool
    travail_a_pourvoir: List[str]

    def __init__(self, nom: str, adresse: str, zip_code: int, ville: str, mail_de_contact: List[str], a_propos: str, historique_de_mail: List[HistoriqueDeMail], phase: str, active: bool, travail_a_pourvoir: List[str]) -> None:
        self.nom = nom
        self.adresse = adresse
        self.zip_code = zip_code
        self.ville = ville
        self.mail_de_contact = mail_de_contact
        self.a_propos = a_propos
        self.historique_de_mail = historique_de_mail
        self.phase = phase
        self.active = active
        self.travail_a_pourvoir = travail_a_pourvoir

def loadJsonEntreprise(json_file):
    objets_entreprise = []

    with open(json_file, 'r') as fichier:
        donnees_json = json.load(fichier)
        for element_json in donnees_json:
            historique_mails = []
            for mail_json in element_json["historiqueDeMail"]:
                mail = HistoriqueDeMail(
                    mail_json["mailDestinaire"],
                    mail_json["mailExpediteur"],
                    mail_json["sujet"],
                    mail_json["content"],
                    mail_json["phase"],
                    mail_json["date"]
                )
                historique_mails.append(mail)

            entreprise = EntrepriseElement(
                element_json["nom"],
                element_json["adresse"],
                element_json["zipCode"],
                element_json["Ville"],
                element_json["mailDeContact"],
                element_json["aPropos"],
                historique_mails,
                element_json["phase"],
                element_json["active"],
                element_json["travailAPourvoir"]
            )
            objets_entreprise.append(entreprise)

    return objets_entreprise

def updateJsonEntreprise(objets_entreprise, json_file):
    data = []
    for entreprise in objets_entreprise:
        historique_mails = []
        for mail in entreprise.historique_de_mail:
            mail_json = {
                "mailDestinaire": mail.mail_destinaire,
                "mailExpediteur": mail.mail_expediteur,
                "sujet": mail.sujet,
                "content": mail.content,
                "phase": mail.phase,
                "date": mail.date
            }
            historique_mails.append(mail_json)

        entreprise_json = {
            "nom": entreprise.nom,
            "adresse": entreprise.adresse,
            "zipCode": entreprise.zip_code,
            "Ville": entreprise.ville,
            "mailDeContact": entreprise.mail_de_contact,
            "aPropos": entreprise.a_propos,
            "historiqueDeMail": historique_mails,
            "phase": entreprise.phase,
            "active": entreprise.active,
            "travailAPourvoir": entreprise.travail_a_pourvoir
        }
        data.append(entreprise_json)

    with open(json_file, 'w') as file:
        json.dump(data, file, indent=4)

def time_since_last_email(element: EntrepriseElement) -> Tuple():
    dernier_mail = None
    phase_dernier_mail = None
    nombre_mails_phase = 0

    for mail in element.historique_de_mail:
        date_mail = datetime.strptime(mail.date, "%d.%m.%Y - %H:%M")
                # Compter le nombre de mails dans la phase
        if mail.phase == phase_dernier_mail:
            nombre_mails_phase += 1
        else:
            nombre_mails_phase = 1

        if dernier_mail is None or date_mail > dernier_mail:
            dernier_mail = date_mail
            phase_dernier_mail = mail.phase


    if dernier_mail is not None:
        aujourdhui = datetime.now()
        jours_ecoules = (aujourdhui - dernier_mail).days
        return jours_ecoules + 1, phase_dernier_mail, nombre_mails_phase
    else:
        return 0, None, None

    
def retrouver_element_par_nom(nom_recherche, elements):
    for element in elements:
        if element.nom == nom_recherche:
            return element
    return None
